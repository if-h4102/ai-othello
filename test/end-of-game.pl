:- module('test_end_of_game', [test_end_of_game/0]).
:- use_module(library(plunit)).
:- use_module('../src/game/end-of-game', []).

% To run this test case
test_end_of_game :-
	run_tests([end_of_game]).

% Define the test case
:- begin_tests(end_of_game).

test(game_over) :-
  Board = [[ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, 1, 1, _, _, _, _],
           [ _, _, _, _, 1, 1, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _]],
	end_of_game:gameOver(Board, -1).

test(winner) :-
  Board = [[ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, 1,-1, _, _, _, _],
           [ _, _, _, _, 1, 1, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _]],
  end_of_game:winner(Board, 1),
  !.

test(player_can_play) :-
  Board = [[ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, 1,-1, _, _, _, _],
           [ _, _, _, _, 1, 1, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _]],
  end_of_game:playerCanPlay(Board, -1),
  !.

test(can_be_played_fail1) :-
  Board = [[ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, 1,-1, _, _, _, _],
           [ _, _, _, _, 1, 1, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _]],
  end_of_game:canBePlayed(Board, 4, 6, 1),
  !.

test(can_be_played_fail2, [fail]) :-
  end_of_game:canBePlayed(_, 1, 0, 1).

:- end_tests(end_of_game).
