:- module('test_end_of_game', [test_end_of_game/0]).
:- use_module(library(plunit)).
:- use_module('../src/game/end-of-game', []).

% To run this test case
test_end_of_game :-
	run_tests([end_of_game]).

% Define the test case
:- begin_tests(end_of_game).

test(game_over) :-
  Board = [[ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, 1, 1, _, _, _, _],
           [ _, _, _, _, 1, 1, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _]],
	end_of_game:gameOver(Board, -1).

test(get_token_number) :-
	Board = [[ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, 1,-1, _, _, _, _],
		 [ _, _, _, _, 1, 1, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _]],
	end_of_game:getTokenNumber(Board,1,TokenNumber),
	TokenNumber == 3.

test(get_score_board) :-
	Board = [[ _, _, _, _, _, _, _, _, _, _],
	         [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, 1,-1, _, _, _, _],
		 [ _, _, _, _, 1, 1, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _]],
	end_of_game:getScoreBoard(Board,Score),
	Score == 2.

test(get_score_board_initial_score) :-
	Board = [[ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, 1,-1, _, _, _, _],
		 [ _, _, _, _,-1, 1, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _]],
	end_of_game:getScoreBoard(Board, Score),
	Score == 0.



test(winner) :-
  Board = [[ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, 1,-1, _, _, _, _],
           [ _, _, _, _, 1, 1, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _]],
  end_of_game:winner(Board, 1),
  !.

test(player_can_play) :-
  Board = [[ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, 1,-1, _, _, _, _],
           [ _, _, _, _, 1, 1, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _]],
  end_of_game:playerCanPlay(Board, -1),
  !.

test(can_be_played) :-
	Board = [[ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, 1,-1, _, _, _, _],
		 [ _, _, _, _, 1, 1, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _]],
	end_of_game:canBePlayed(Board,6,5,-1),
	!.


test(can_be_played_fail1) :-
  Board = [[ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, 1,-1, _, _, _, _],
           [ _, _, _, _, 1, 1, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _],
           [ _, _, _, _, _, _, _, _, _, _]],
  end_of_game:canBePlayed(Board, 4, 6, 1),
  !.

test(can_be_played_fail2, [fail]) :-
  end_of_game:canBePlayed(_, 1, 0, 1).

test(swapped_case_direction_same_player) :-
	Board = [[ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, 1,-1, _, _, _, _],
		 [ _, _, _, _, 1, 1, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _]],
	end_of_game:swappedCaseDirection(Board,5,6,0,-1,1,SwappedCase),
	SwappedCase == 0.

test(swapped_case_direction_case_empty) :-
	Board = [[ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, 1,-1, _, _, _, _],
		 [ _, _, _, _, 1, 1, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _]],
	end_of_game:swappedCaseDirection(Board,5,6,1,-1,1,SwappedCase),
	SwappedCase == -10.

test(swapped_case_direction_case_other_player) :-
	Board = [[ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, 1,-1, _, _, _, _],
		 [ _, _, _, _, 1, 1, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _]],
	end_of_game:swappedCaseDirection(Board,6,5,-1,0,-1,SwappedCase),
	SwappedCase == 1.

test(is_swapping_case) :-
	Board = [[ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, 1,-1, _, _, _, _],
		 [ _, _, _, _, 1, 1, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _]],
	end_of_game:isSwappingCase(Board,3,6,1),
	!.


test(is_swapping_case_fail, [fail]) :-
	Board = [[ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, 1,-1, _, _, _, _],
		 [ _, _, _, _, 1, 1, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _],
		 [ _, _, _, _, _, _, _, _, _, _]],
	end_of_game:isSwappingCase(Board,5,6,1).


:- end_tests(end_of_game).
